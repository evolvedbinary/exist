xquery version "3.1";

module namespace ccu = "https://ns.eidohealthcare.com/existdb/craft-connector-util";

declare %private variable $ccu:regex-craft-connector-docname as xs:string := "procedure\.([A-Z0-9_]+)_([a-z]{2,3}(?:-[A-Z]{2})?)_([a-z]+)_(full|reduced)_([0-9]+\.[0-9]+(?:\.[0-9]+)?)";
declare variable $ccu:source.craft-connector as xs:string := "eido-craft-connector";
declare variable $ccu:source.existdb-editorial as xs:string := "eido-existdb-editorial";

(:~
 : A map from CraftCMS Library Names to Territory Names.
 :
 : @param $key the CraftCMS Library Name.
 : @param $value the Territory Name.
 :)
declare variable $ccu:craft-library-to-territory-map as map(xs:string, xs:string) := map {
    "uk":   "UK",
    "can":  "CANADA",
    "aus":  "AUS",
    "sa":   "SA",
    "gre":  "Greece",
    "uae":  "UAE",
    "ire":  "IRELAND",
    "wa":   "WALES",
    "ind":  "India"
};

(:~
 : Utilities for working with documents from the Craft Connector.
 :
 : @author <a href="mailto:adam@evolvedbinary.com">Adam Retter</a>
 :)

(:~
 : Is the docname one which was generated by the Craft Connector?
 :
 : @param $docname the document filename
 : @return true if it matches the pattern generated by Craft Connector, false otherwise
 :)
declare function ccu:is-craft-connector-docname($docname as xs:string) as xs:boolean {
    fn:matches($docname, $ccu:regex-craft-connector-docname)
};

(:~
 : Extract the components from a docname generated by the Craft Connector
 : or the eXist-db Editorial Application.
 :
 : @param $docname the document filename.
 : @return a map with the keys: source, code, language, library, view, version, and docnum for a Craft Connector
 :     document, or the keys: source, code, and docnum for a eXist-db Editorial Application document. The key source
 :     indicates whether it is a Craft Connector document or an eXist-db Editorial Application document.
 :)
declare function ccu:extract-components-from-docname($docname as xs:string) as map(xs:string, xs:string) {
    if (ccu:is-craft-connector-docname($docname))
    then
        ccu:extract-components-from-craft-connector-docname($docname)
    else
        ccu:extract-components-from-editorial-docname($docname)
};

(:~
 : Extract the components from a docname generated by the Craft Connector.
 :
 : @param $docname the document filename.
 : @return a map with the keys: source, code, language, library, view, version, version-identifiers, and docnum.
 :)
declare function ccu:extract-components-from-craft-connector-docname($docname as xs:string) as map(xs:string, xs:string) {
    let $result := fn:analyze-string($docname, $ccu:regex-craft-connector-docname)
    let $version := $result//fn:group[@nr eq "5"]/string(.)
    return
        map {
            "source": $ccu:source.craft-connector,
            "code": $result//fn:group[@nr eq "1"]/string(.),
            "language": $result//fn:group[@nr eq "2"]/string(.),
            "library": $result//fn:group[@nr eq "3"]/string(.),
            "view": $result//fn:group[@nr eq "4"]/string(.),
            "version": $version,
            "version-identifiers": array { fn:tokenize($version, "\.") },
            "docnum": fn:replace($docname, ".xml", "")
        }
};

(:~
 : Extract the components from a docname generated by the eXist-db Editorial Application.
 :
 : @param $docname the document filename.
 : @return a map with the keys: source, code, and docnum.
 :)
declare function ccu:extract-components-from-editorial-docname($docname as xs:string) as map(xs:string, xs:string) {
    let $subst := fn:replace($docname, ".xml", "") return (
    map {
        "source": $ccu:source.existdb-editorial,
        "code": $subst,
        "docnum": $subst
    })
};

(:~
 : Is the source from the Craft Connector?
 :
 : @param $source the Article source
 : @return true if it was generated by Craft Connector, false otherwise
 :)
declare function ccu:is-from-craft-connector($source as xs:string?) as xs:boolean {
    $source = $ccu:source.craft-connector 
};

(:~
 : Determines if two docname components are comparable.
 :
 : When an XP docname is involved, only the 'code' component is
 : checked for equality between $control-components and  $test-components,
 : otherwise all components apart from the 'version' component are checked for equality.
 :
 : @param $control-components The control value to test against.
 : @param $test-components The value to check for comparability against the control value.
 :
 : @return true if the components are comparable, false otherwise.
 :)
declare function ccu:comparable($control-components as map(xs:string, xs:string), $test-components as map(xs:string, xs:string)) as xs:boolean {
  if (($control-components?source, $test-components?source) = $ccu:source.existdb-editorial)
  then
    (: at least one of these is from XP, so we can only compare the 'code' :)
    $control-components?code eq $test-components?code
  else
    (: compare everything except the 'version' :)
    $control-components?code eq $test-components?code
    and
    $control-components?language eq $test-components?language
    and
    $control-components?library eq $test-components?library
    and
    $control-components?view eq $test-components?view
};
